#!/usr/bin/env node
//*****************  a local copy as I don't want to change NZBase */

/**
 * make the summary XML file for profiles & extenions
 * makes the pages : input/pagecontent/profiles.xml and input/pagecontent/extensions.xml
 * execute: ./makeProfilesAndExtensions {IG} in the root folder of an IG
 * assumes all SD's are generated by sushi
 * 
 * Need to execute the ./globalScripts/makeGlobalIGSummary after changes to extensions (add / remove) to
 * update the allExt.json and allVS.json files that list the location of all known extensions / term
 *      (so when a profile references an extension defined elsewhere, it knows where it is defined)
 * */

let fs = require('fs');
let igRoot = "/Users/davidhay/IG/";
//let markdown = require( "markdown" ).markdown;


//open the file 'allExt.json' containing all extensions defined by all known IGs

let data = fs.readFileSync("../globalScripts/allExt.json").toString();
let hashAllKnownExtensions = JSON.parse(data)
//console.log(hashAllKnownExtensions)

let fmmExtensionUrl = "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm"

let addFMM = false;      //pass in on the command line
let addStatus = false;

let igName = process.argv[2];   
if (!igName) {
    console.log("No IG specified. Must be in the command eg: ./makeProfilesAndExtensions nhi")
    return;
}

let fullPath = igRoot + igName;

if ( ! fs.existsSync(fullPath)) {
    console.log("The IG '" + igName + "' does not exist (at least, there is no folder with that name.")
    return;
}


let rootPath = igRoot + igName +  "/fsh-generated/resources/";

let profileOutFile1 = igRoot + igName + "/input/pagecontent/profiles.xml";  // for IG publisher
let extOutFile1 = igRoot + igName + "/input/pagecontent/extensions.xml";  // for IG publisher

let bundleFile = igRoot + igName + "/generated/SDs.json"
let bundle = {resourceType:'Bundle',type:'batch',entry:[]}

console.log('Building summary of profiles & extensions for ' + igName)
console.log("IG is located at "+ fullPath);
console.log('Location of StructureDefinitions:' + rootPath)
console.log('Writing profile output to ' + profileOutFile1)
console.log('Writing extension output to ' + extOutFile1)
console.log("Bundle file " + bundleFile)

//all the IGs
//let arAllIgs = ["nzbase","nhi","hpi","northernRegion"]      //all the known IGs


// =========================   defined Profiles   ================

// = "http://build.fhir.org/ig/HL7NZ/";   //where the IGs are

//let onlineBranch = "/branches/main/";     //currently the dev master branch
//let onlineBranch = "/branches/master/";     //currently the dev master branch

let ar = []
ar.push("<div xmlns='http://www.w3.org/1999/xhtml'>")

ar.push("<!-- Generated by the makeProfilesAndExtensions script -->")

ar.push("<br/><strong>Profiles defined in this guide</strong><br/><br/>")
ar.push("<table class='table table-bordered table-hover table-sm'>")
ar.push("<tr><th>Title</th><th>Type</th><th>Canonical url / Observable entity url</th><th>Description</th></tr>")

let fullFolderPath = rootPath ; //"../" + igName + "/input/profiles";

//---------- Profiles -------------
if (fs.existsSync(fullFolderPath)) {
    let arFiles = fs.readdirSync(fullFolderPath);
    arFiles.forEach(function(name){
        if (name.indexOf("StructureDefinition-") > -1 ) {
            let fullFileName = fullFolderPath + name;

            console.log(fullFileName)
            let contents = fs.readFileSync(fullFileName).toString();
           //console.log(contents)
                let profile;
                try {
                    profile = JSON.parse(contents)
                    console.log('parsed')
                    if (profile.type !== 'Extension' && profile.kind !== 'logical') {
                        ar.push("<tr>")
        
                        let link = "StructureDefinition-" + profile.id + ".html";
                        //let link = onlineServer + igName + onlineBranch + "StructureDefinition-" + profile.id + ".html";
            
//console.log(link)
                        let display = profile.title || profile.id

                        ar.push("<td><a href='"+link+"'>" + display + "</a></td>")

                         //add the profiled resource type
                         ar.push(`<td>${profile.type}</td>`)

                        ar.push("<td>" + profile.url + "<br/>")

                        if (profile.type == 'Observation' || profile.type == 'CarePlan') {
                            let arSlices = getSlices(profile)      //retrieve the slices on code
                        
                            arSlices.forEach(function(slice){
                                ar.push(`<br/>OE: <strong>${slice.system} : ${slice.code} </strong>`)
                            })
                        }


                        ar.push( "</td>")
                        ar.push("<td>" + cleanText(profile.description) + "</td>")
                        
                        ar.push("</tr>")
                        addResourceToBundle(bundle,profile)
                    }
                } catch (ex) {
                    console.log("error reading " + fullFileName)
                    console.log(ex.message)
                }
        }
    })

    ar.push("</table>")
} else {
    console.log("Error: Path " + fullFolderPath + " not found")
}

ar.push("</div>")


let file = ar.join('\r\n')
fs.writeFileSync(profileOutFile1,file);

// ========= defined extensions
let hashExtensions = {} //extensions defined in the guide

ar.length = 0;

ar.push("<div xmlns='http://www.w3.org/1999/xhtml'>")
///ar.push('<a name="internalExtensions"> </a>')   
//ar.push("<br/><h3>Extensions defined in this guide</h3><br/><br/>")
ar.push("<table width='100%' border='1' cellspacing='0' cellpadding='5px'>")
ar.push("<tr><th>Id</th><th>Canonical url</th><th>Context of Use</th><th>Description</th><th>Purpose</th>");
if (addFMM) {
    ar.push("<th>FMM</th>")
}

if (addStatus) {
    ar.push("<th>Status</th>")
}

ar.push("</tr>")

//ar.push("</table>")

// ===== make summary of extensions defined in this guide =====
if (fs.existsSync(fullFolderPath)) {
    let arFiles = fs.readdirSync(fullFolderPath);
    arFiles.forEach(function(name){
        if (name.indexOf("StructureDefinition-") > -1 ) {
            let fullFileName = fullFolderPath + "/"+ name;
            let contents = fs.readFileSync(fullFileName).toString();
            
            let ext =  JSON.parse(contents);
            if (ext.type == 'Extension') {
                addResourceToBundle(bundle,ext)

                let fmm = getExtensionValue(ext,fmmExtensionUrl,'valueInteger') || '0';
//console.log(fmm)
                hashExtensions[ext.url] = true;     //make a note of the extension


                if (addStatus) {
                    if (ext.status == 'active') {
                        ar.push("<tr style='background-color:#FFCCCC'>")
                    } else {
                        ar.push("<tr>")
                    }
                } else {
                    ar.push("<tr>")
                }

               
    
                let link = "StructureDefinition-" + ext.id + ".html";
                // testing... let link = onlineServer + igName + onlineBranch + "StructureDefinition-" + ext.id + ".html";

                ar.push("<td><a href='"+link+"'>" + ext.id + "</a></td>")

                //ar.push("<td><a href='"+ ext.url + "'>" + ext.url + "</a></td>")
                ar.push("<td>" + ext.url + "</td>")
                ar.push("<td>")
                if (ext.context) {
                    ext.context.forEach(function(ctx){
                        ar.push("<div>" + ctx.expression + "</div>")
                    })
                }
                ar.push("</td>")
    
                ar.push("<td>" + cleanText(ext.description) + "</td>")
                if (ext.purpose) {
                    ar.push("<td>" + cleanText(ext.purpose) + "</td>")
                } else {
                    ar.push("<td></td>")
                }
               
                if (addFMM) {
                    ar.push("<td>" + fmm + "</td>")
                }
                if (addStatus) {
                    ar.push("<td>" + ext.status + "</td>")
                }

                ar.push("</tr>")
            }

        }
    })

    ar.push("</table>")
}






//+++++=

ar.push("</div>")


let file1 = ar.join('\r\n')
//fs.writeFileSync(extOutFile,file1);
fs.writeFileSync(extOutFile1,file1);

fs.writeFileSync(bundleFile,JSON.stringify(bundle));


// get value of an extension valueType = 'valueInteger' or similarrr
function getExtensionValue(resource,url,valueType) {
    let result = ""
    if (resource.extension) {
        resource.extension.forEach(function(ext){
            if (ext.url = url) {
                //console.log(ext,valueType)
                result = ext[valueType]
            }
        })
    }
    return result
}


//ensure that characters that can update XML are 'escpaed'
function cleanText(s) {
    //replace all instances of '& ' with 'and '
    if (s) {

        //a hack for the ethnicity extension in nzbase - the url is too long and mucks up the table spacing
       // s = s.split('=http').join('= http')



        let s1 = s.split('& ').join('and ')
        //temp return markdown.toHTML(s1)
        return s1
    } else {
        return s
    }
}


function addResourceToBundle(bundle,resource) {

    if (resource.fhirVersion) {
        resource.fhirVersion = "4.0.0"
    }

    let entry = {resource:resource};
    entry.request = {method:'PUT', url: resource.resourceType + "/" + resource.id}
    bundle.entry.push(entry)
}

//-------- extract out Observation slices...  Quite specific to this implementation!

function getSlices(resource) {
    let arSlices = []
    if (resource.differential && resource.differential.element) {
        //create a hash based on id
        let hash = {}
        resource.differential.element.forEach(function(element){
            hash[element.id] = element
        })

        resource.differential.element.forEach(function(element){
            if (element.sliceName && element.path.indexOf('xtension') == -1) {
                console.log('sn: ' + element.sliceName)
                let pathToSystem = element.path + ":" + element.sliceName + '.system'
                let pathToCode = element.path + ":" + element.sliceName + '.code'
                let system = hash[pathToSystem].patternUri
                let code = hash[pathToCode].patternCode
                console.log(system,code)
                arSlices.push({system:system,code:code})

            }
        })


    }
    return arSlices

}

function loadFile(fullFileName) {
    //let fullFileName = rootPath + path;
    let contents = fs.readFileSync(fullFileName, {encoding: 'utf8'});
    let resource = JSON.parse(contents)
    return resource;
}